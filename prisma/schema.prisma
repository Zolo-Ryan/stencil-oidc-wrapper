generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ApplicationOauthScope {
  id             String   @id @default(uuid())
  applicationsId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  description    String

  applications Application @relation(fields: [applicationsId], references: [id], onDelete: Cascade)

  @@unique([applicationsId, name], name: "application_oauth_scopes_uk_1")
}

model ApplicationRole {
  id             String   @id @default(uuid())
  applicationsId String
  description    String?
  createdAt      DateTime @default(now())
  isDefault      Boolean
  isSuperRole    Boolean
  updatedAt      DateTime @default(now())
  name           String

  applications         Application            @relation(fields: [applicationsId], references: [id], onDelete: Cascade)
  GroupApplicationRole GroupApplicationRole[]

  @@unique([name, applicationsId], name: "application_roles_uk_1")
}

model Application {
  id                       String   @id @default(uuid())
  accessTokenSigningKeysId String?
  active                   Boolean
  data                     String
  idTokenSigningKeysId     String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  name                     String
  tenantId                 String

  tenant                Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  accessTokenSigningKey Key?                    @relation("ApplicationAccessTokenSigningKey", fields: [accessTokenSigningKeysId], references: [id])
  idTokenSigningKey     Key?                    @relation("ApplicationIdTokenSigningKey", fields: [idTokenSigningKeysId], references: [id])
  oauthScopes           ApplicationOauthScope[]
  roles                 ApplicationRole[]
  refreshTokens         RefreshToken[]
  userRegistrations     UserRegistration[]
  PublicKeys            PublicKeys[]

  @@unique([name, tenantId], name: "applications_uk_1")
  @@index([tenantId], name: "applications_i_1")
}

model GroupApplicationRole {
  id                 String @id @default(uuid())
  applicationRolesId String
  groupsId           String

  applicationRole ApplicationRole @relation(fields: [applicationRolesId], references: [id], onDelete: Cascade)
  group           Group           @relation(fields: [groupsId], references: [id], onDelete: Cascade)

  @@unique([groupsId, applicationRolesId], name: "group_application_roles_uk_1")
}

model GroupMember {
  id        String   @id @default(uuid())
  groupId   String
  createdAt DateTime @default(now())
  userId    String

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@unique([groupId, userId], name: "group_members_uk_1")
  @@index([userId], name: "group_members_i_1")
}

model Group {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  tenantId  String

  tenant           Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  members          GroupMember[]
  applicationRoles GroupApplicationRole[]

  @@unique([name, tenantId], name: "groups_uk_1")
}

model Key {
  id          String   @id @default(uuid())
  algorithm   String?
  certificate String?
  expiry      Int?
  createdAt   DateTime @default(now())
  issuer      String?
  kid         String   @unique
  updatedAt   DateTime @updatedAt
  name        String   @unique
  privateKey  String?
  publicKey   String?
  secret      String?
  type        String
  data        String

  applicationsAccessTokenSigningKeys Application[] @relation("ApplicationAccessTokenSigningKey")
  applicationsIdTokenSigningKeys     Application[] @relation("ApplicationIdTokenSigningKey")
  tenantsAccessTokenSigningKeys      Tenant[]      @relation("TenantAccessTokenSigningKey")
  tenantsIdTokenSigningKeys          Tenant[]      @relation("TenantIdTokenSigningKey")
}

model RefreshToken {
  id             String   @id @default(uuid())
  applicationsId String?
  expiry         BigInt
  data           String?
  createdAt      DateTime @default(now())
  startInstant   BigInt
  tenantId       String?
  token          String?  @unique
  tokenHash      String?  @unique
  tokenText      String?
  usersId        String

  application Application? @relation(fields: [applicationsId], references: [id], onDelete: Cascade)
  tenant      Tenant?      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [usersId], references: [id])

  @@unique([applicationsId, usersId], name: "unique_applications_users_uk_1")
  @@index([startInstant], name: "refresh_tokens_i_1")
  @@index([applicationsId], name: "refresh_tokens_i_2")
  @@index([usersId], name: "refresh_tokens_i_3")
  @@index([tenantId], name: "refresh_tokens_i_4")
}

model Tenant {
  id                       String   @id @default(uuid())
  accessTokenSigningKeysId String
  data                     String?
  idTokenSigningKeysId     String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  name                     String   @unique

  accessTokenSigningKey Key                 @relation("TenantAccessTokenSigningKey", fields: [accessTokenSigningKeysId], references: [id])
  idTokenSigningKey     Key                 @relation("TenantIdTokenSigningKey", fields: [idTokenSigningKeysId], references: [id])
  applications          Application[]
  groups                Group[]
  refreshTokens         RefreshToken[]
  users                 User[]
  AuthenticationKey     AuthenticationKey[]
}

model UserRegistration {
  id                  String    @id @default(uuid())
  applicationsId      String
  authenticationToken String?   @unique
  password            String
  data                String?
  createdAt           DateTime  @default(now())
  lastLoginInstant    DateTime?
  updatedAt           DateTime  @updatedAt
  usersId             String

  application Application @relation(fields: [applicationsId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [usersId], references: [id])

  @@unique([applicationsId, usersId], name: "user_registrations_uk_1")
  @@index([usersId], name: "user_registrations_i_2")
}

model User {
  id        String   @id @default(uuid())
  active    Boolean
  data      String
  expiry    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenantId  String
  email     String   @unique

  tenant            Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  groupMembers      GroupMember[]
  refreshTokens     RefreshToken[]
  userRegistrations UserRegistration[]
}

model AuthenticationKey {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  keyManager  Boolean
  keyValue    String   @unique
  permissions String?
  metaData    String?
  tenantsId   String?

  tenant Tenant? @relation(fields: [tenantsId], references: [id], onDelete: Cascade)
}

model Admin {
  username String @unique
  password String @unique
}

model PublicKeys {
  id            String @unique @default(uuid())
  applicationId String
  hostname      String
  publicKey     String

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([applicationId, hostname], name: "publicKeys_unique_applicationId_hostname")
}

model Session {
  id  String @unique
  val String
  uid String @unique
}

model Interaction {
  id  String @unique
  val String
}

model Grant {
  id  String @unique
  val String
}
